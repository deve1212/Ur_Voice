#!/usr/bin/env node

/**
 * Module dependencies.
 */
const MongoClient = require('mongodb').MongoClient;
var app = require('../app');
var debug = require('debug')('myvoice:server');
var http = require('http');
const db = require('../config/db')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */console.log('url 0----',db.url)
MongoClient.connect(db.url, function(err, client) {
  if (err) 
    { 
      console.warn('found errors--------')
      return console.log(err);
    }
  console.log('connected to mongo db server-------------')
  const database = client.db("test")
  // database.collection('data')
  email_collection = database.collection('email_details')
  // const note = { text: "this is email text", title: "email title"}; 
  // email_collection.insert(note, (err, results) => {console.log('result---',results)})
  require('../routes')(app, database);
  console.log(database)
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  // perform actions on the collection object
  client.close();
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// module.exports =  collection